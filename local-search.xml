<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>重新学习数据结构与算法（三）</title>
    <link href="/2022/09/13/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/09/13/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>前面我们介绍了如何使用数组实现线性表，我们接着来看第二种方式，我们可以使用链表来实现，那么什么是链表呢？</p><p><img src="/img/article/data_structure/lianbiao/lianbiao1.png"></p><p>链表不同于顺序表，顺序表底层采用数组作为存储容器，需要分配一块连续且完整的内存空间进行使用，而链表则不需要，它通过一个指针来连接各个分散的结点，形成了一个链状的结构，每个结点存放一个元素，以及一个指向下一个结点的指针，通过这样一个一个相连，最后形成了链表。它不需要申请连续的空间，只需要按照顺序连接即可，虽然物理上可能不相邻，但是在逻辑上依然是每个元素相邻存放的，这样的结构叫做链表（单链表）。</p><p>链表分为带头结点的链表和不带头结点的链表，戴头结点的链表就是会有一个头结点指向后续的整个链表，但是头结点不存放数据：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao2.png"></p><p>而不带头结点的链表就像上面那样，第一个节点就是存放数据的结点，一般设计链表都会采用带头结点的结构，因为操作更加方便。</p><p>那么我们就来尝试编写一个带头结点的链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;   <span class="hljs-comment">//这个还是老样子</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;   <span class="hljs-comment">//保存当前元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> * <span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指向下一个结点的指针</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">Node</span>;</span>   <span class="hljs-comment">//这里我们直接为结点指针起别名，可以直接作为表实现</span><br></code></pre></td></tr></table></figure><p>接着我们来设计一下链表的插入和删除，我们前面实现了顺序表的插入，那么链表的插入该怎么做呢？</p><p><img src="/img/article/data_structure/lianbiao/lianbiao3.png"></p><p>我们可以先修改新插入的结点的后继结点（也就是下一个结点）指向，指向原本在这个位置的结点：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao4.png"></p><p>接着我们可以将前驱结点（也就是上一个结点）的后继结点指向修改为我们新插入的结点：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao5.png"></p><p>这样，我们就成功插入了一个新的结点，现在新插入的结点到达了原本的第二个位置上：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao6.png"></p><p>按照这个思路，我们来实现一下，首先设计一下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span>&#123;<br><span class="hljs-comment">//head是头结点，element为待插入元素，index是待插入下标</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们需要先找到待插入位置的前驱结点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//如果插入的位置小于1，那肯定是非法的</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;   <span class="hljs-comment">//通过--index的方式不断向后寻找前驱结点</span><br>        head = head-&gt;next;   <span class="hljs-comment">//正常情况下继续向后找</span><br>      <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>      <span class="hljs-comment">//如果在寻找的过程中发型已经没有后续结点了，那么说明index超出可插入的范围了，也是非法的，直接润</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在循环操作完成后，如果没问题那么会找到对应插入位置的前驱结点，我们只需要按照上面分析的操作来编写代码即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>      <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//创建一个新的结点，如果内存空间申请失败返回0</span><br>    node-&gt;element = element;   <span class="hljs-comment">//将元素保存到新创建的结点中</span><br>    node-&gt;next = head-&gt;next;   <span class="hljs-comment">//先让新插入的节点指向原本位置上的这个结点</span><br>    head-&gt;next = node;   <span class="hljs-comment">//接着将前驱结点指向新的这个结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们就编写好了链表的插入操作了，我们可以来测试一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(Node head)</span>&#123;<br>    <span class="hljs-keyword">while</span> (head-&gt;next) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, head-&gt;element);   <span class="hljs-comment">//因为头结点不存放数据，所以从第二个开始打印</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;  <span class="hljs-comment">// up这边笔记也错了 应该这样写</span><br>        insertList(&amp;head, i * <span class="hljs-number">100</span>, i);   <span class="hljs-comment">//依次插入3个元素</span><br>    &#125;<br><br>    printList(&amp;head);<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功得到结果：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao7.png"></p><p>那么链表的插入我们研究完了，接着就是结点的删除了，那么我们如何实现删除操作呢？实际上也会更简单一些，我们可以直接将待删除节点的前驱结点指向修改为待删除节点的下一个：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao8.png"></p><p><img src="/img/article/data_structure/lianbiao/lianbiao9.png"></p><p>这样，在逻辑上来说，待删除结点其实已经不在链表中了，所以我们只需要释放掉待删除结点占用的内存空间就行了：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao10.png"></p><p>那么我们就按照这个思路来编写一下程序，首先还是设计函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">//head就是头结点，index依然是待删除的结点位序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们还是需要找到待删除结点的前驱结点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//大体和上面是一样的</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//注意删除的范围，如果前驱结点的下一个已经是NULL了，那么也说明超过了范围</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后就是按照我们上面说的删除结点了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (index--) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    Node tmp = head-&gt;next;   <span class="hljs-comment">//先拿到待删除结点</span><br>    head-&gt;next = head-&gt;next-&gt;next;   <span class="hljs-comment">//直接让前驱结点指向下一个的下一个结点</span><br>    <span class="hljs-built_in">free</span>(tmp);   <span class="hljs-comment">//最后使用free函数释放掉待删除结点的内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们就成功完成了链表的删除操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br>        insertList(&amp;head, i * <span class="hljs-number">100</span>, i);<br>    &#125;<br>    deleteList(&amp;head, <span class="hljs-number">1</span>);   <span class="hljs-comment">//up笔记又有问题 基本上就是位置判断，0和1之间的判定</span><br>    printList(&amp;head);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后得到结果也是正确的：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao11.png"></p><p>接着就是链表的一些其他操作了，这里我们也来实现一下，首先是获取对应位置上的元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">E * <span class="hljs-title function_">getList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//如果小于0那肯定不合法，返回NULL</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        head = head-&gt;next;  <span class="hljs-comment">//因为不算头结点，所以使用do-while语句</span><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//如果已经超出长度那肯定也不行</span><br>    &#125; <span class="hljs-keyword">while</span> (--index);  <span class="hljs-comment">//到达index就结束</span><br>    <span class="hljs-keyword">return</span> &amp;head-&gt;element;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着是查找对应元素的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findList</span><span class="hljs-params">(Node head, E element)</span>&#123;<br>    head = head-&gt;next;    <span class="hljs-comment">//先走到第一个结点</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;   <span class="hljs-comment">//计数器</span><br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-keyword">if</span>(head-&gt;element == element) <span class="hljs-keyword">return</span> i;   <span class="hljs-comment">//如果找到，那么就返回i</span><br>        head = head-&gt;next;   <span class="hljs-comment">//没找到就继续向后看</span><br>        i++;   <span class="hljs-comment">//i记住要自增</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;   <span class="hljs-comment">//都已经走到链表尾部了，那么就确实没找到了，返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着是求链表的长度，这个太简单了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(Node head)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;  <span class="hljs-comment">//从0开始</span><br>    <span class="hljs-keyword">while</span> (head-&gt;next) &#123;   <span class="hljs-comment">//如果下一个为NULL那就停止</span><br>        head = head-&gt;next;<br>        i++;   <span class="hljs-comment">//每向后找一个就+1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们的链表就编写完成了，整个代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> * <span class="hljs-title">next</span>;</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> * <span class="hljs-title">Node</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node node)</span>&#123;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//大体和上面是一样的</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    Node tmp = head-&gt;next;<br>    head-&gt;next = head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(tmp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>E * <span class="hljs-title function_">getList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">while</span> (--index);<br>    <span class="hljs-keyword">return</span> &amp;head-&gt;element;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">findList</span><span class="hljs-params">(Node head, E element)</span>&#123;<br>    head = head-&gt;next;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-keyword">if</span>(head-&gt;element == element) <span class="hljs-keyword">return</span> i;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(Node head)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题：</strong> 请问链式实现的线性表，插入、删除、获取元素操作的时间复杂度为？</p><ul><li><strong>插入：</strong> 因为要寻找对应位置的前驱结点，所以平均时间复杂度为$O(n)$，但是不需要做任何的移动操作，效率肯定是比顺序表要高的。</li><li><strong>删除：</strong> 同上，所以平均时间复杂度为$O(n)$</li><li><strong>获取元素：</strong> 由于必须要挨个向后寻找，才能找到对应的结点，所以时间复杂度为$O(n)$，不支持随机访问，只能顺序访问，比顺序表慢。</li></ul><p><strong>问题：</strong> 什么情况下使用顺序表，什么情况下使用链表呢？</p><ul><li><p>通过分析顺序表和链表的特性我们不难发现，链表在随机访问元素时，需要通过遍历来完成，而顺序表则利用数组的特性直接访问得到，所以，当我们读取数据多于插入或是删除数据的情况下时，使用顺序表会更好。</p></li><li><p>而顺序表在插入元素时就显得有些鸡肋了，因为需要移动后续元素，整个移动操作会浪费时间，而链表则不需要，只需要修改结点 指向即可完成插入，所以在频繁出现插入或删除的情况下，使用链表会更好。</p></li></ul><p><strong>链表练习题：</strong> </p><ol><li><p>在一个长度为n (n&gt;1)的单链表上，设有头和尾两个指针，执行（     ）操作与链表的长度有关？<br>A．删除单链表中的第一个元素<br>B．删除单链表中的最后一个元素<br>C．在单链表第一个元素前插入一个新元素<br>D．在单链表最后一个元素后插入一个新元素<br>注意题干，现在有指向链表头尾的两个指针，那么A、C肯定是可以直接通过头结点找到的，无论链表长度如何都不影响，D也可以直接通过尾指针进行拼接，只有B需要尾指针的前驱结点，此时只能从头开始遍历得到，所以选择B </p></li><li><p>在一个单链表HL中（HL为头结点指针），若要向表头插入一个由指针p指向的结点，则执行？<br>A． HL＝p; p-&gt;next＝HL;<br>B． p-&gt;next＝HL; HL＝p;<br>C． p-&gt;next＝HL; p＝HL;<br>D． p-&gt;next＝HL-&gt;next; HL-&gt;next＝p;<br>既然要在表头插入一个数据，也就是说要在第一个位置插入，那么根据我们之前讲解的链表的插入，只需要将头结点指向新的结点，再让新的结点指向原本的第一个结点即可，所以选择D </p></li><li><p>链表不具备的特点是？<br>A．可随机访问任一结点             B．插入删除不需要移动元素<br>C．不必事先估计存储空间         D．所需空间与其长度成正比<br>我们前面说了，链表由于是链式存储结构，无法直接访问到对应下标的元素，所以我们只能通过遍历去找到对应位置的元素，故选择A</p></li></ol><h3 id="双向链表和循环链表"><a href="#双向链表和循环链表" class="headerlink" title="双向链表和循环链表"></a>双向链表和循环链表</h3><p>前面我们介绍了单链表，通过这样的链式存储，我们不用再像顺序表那样一次性申请一段连续的空间，而是只需要单独为结点申请内存空间，同时在插入和删除的速度上也比顺序表轻松。不过有一个问题就是，如果我们想要操作某一个结点，比如删除或是插入，那么由于单链表的性质，我们只能先去找到它的前驱结点，才能进行。</p><p>为了解决这种查找前驱结点非常麻烦的问题，我们可以让结点不仅保存指向后续结点的指针，同时也保存指向前驱结点的指针：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao12.png"></p><p>这样我们无论在哪个结点，都能够快速找到对应的前驱结点，就很方便了，这样的链表我们成为双向链表（双链表）</p><p>这里我们也来尝试实现一下，首先定义好结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;   <span class="hljs-comment">//保存当前元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> * <span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指向下一个结点的指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> * <span class="hljs-title">prev</span>;</span>   <span class="hljs-comment">//指向上一个结点的指针</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> * <span class="hljs-title">Node</span>;</span><br></code></pre></td></tr></table></figure><p>接着是初始化方法，在初始化时需要将前驱和后继都设置为NULL：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">initNode</span><span class="hljs-params">(Node node)</span>&#123;<br>    node-&gt;next = node-&gt;prev = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initNode(&amp;head);<br>&#125;<br></code></pre></td></tr></table></figure><p>接着是双向链表的插入操作，这就比单链表要麻烦一些了，我们先来分析一下：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao13.png"></p><p>首先我们需要考虑后继结点，当新的结点插入之后，新的结点的后继结点就是原本在此位置上的结点，所以我们可以先将待插入结点的后继指针指向此位置上的结点：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao14.png"></p><p>由于是双向链表，所以我们需要将原本在此位置上的结点的前驱指针指向新的结点：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao15.png"></p><p>接着我们来处理一下前驱结点，首先将前驱结点的后继指针修改为新的结点：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao16.png"></p><p>最后我们将新的结点的前驱指针指向前驱结点即可：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao17.png"></p><p>这样，我们就完成了双向链表中结点的插入操作，按照这个思路，我们来设计一下函数吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//跟单链表一样，还是先找到对应的位置</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> ListNode));  <span class="hljs-comment">//创建新的结点</span><br>    <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  node-&gt;element = element;<br><br>    <span class="hljs-keyword">if</span>(head-&gt;next) &#123;   <span class="hljs-comment">//首先处理后继结点，现在有两种情况，一种是后继结点不存在的情况，还有一种是后继结点存在的情况</span><br>        head-&gt;next-&gt;prev = node;   <span class="hljs-comment">//如果存在则修改对应的两个指针</span><br>        node-&gt;next = head-&gt;next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//不存在直接将新结点的后继指针置为NULL</span><br>    &#125;<br>    <br>    head-&gt;next = node;   <span class="hljs-comment">//接着是前驱结点，直接操作就行</span><br>    node-&gt;prev = head;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们就编写好了双向链表的插入操作，来测试一下吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initNode(&amp;head);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; ++i)  <span class="hljs-comment">//插5个元素吧</span><br>        insertList(&amp;head, i * <span class="hljs-number">100</span>, i);<br><br>    Node node = &amp;head;   <span class="hljs-comment">//先来正向遍历一次</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        node = node-&gt;next;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, node-&gt;element);<br>    &#125; <span class="hljs-keyword">while</span> (node-&gt;next != <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);   <span class="hljs-comment">//再来反向遍历一次</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, node-&gt;element);<br>        node = node-&gt;prev;<br>    &#125; <span class="hljs-keyword">while</span> (node-&gt;prev != <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到结果没有问题：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao18.png"></p><p>无论是正向遍历还是反向遍历，都可以正常完成，相比单链表的灵活度肯定是更大的，我们接着来看删除操作，其实删除操作也是差不多的方式：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao19.png"></p><p>我们只需将前驱结点和后继结点的指向修改即可：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao20.png"></p><p>现在我们就来编码吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//跟单链表一样，还是先找到对应的位置</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    Node tmp = head-&gt;next;  <span class="hljs-comment">//先拿到待删除结点</span><br>    <span class="hljs-keyword">if</span>(head-&gt;next-&gt;next) &#123;   <span class="hljs-comment">//这里有两种情况待删除结点存在后继结点或是不存在</span><br>        head-&gt;next-&gt;next-&gt;prev = head;<br>        head-&gt;next = head-&gt;next-&gt;next;   <span class="hljs-comment">//按照上面分析的来</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//相当于删的是最后一个结点，所以直接后继为NULL就完事</span><br>    &#125;<br>    <span class="hljs-built_in">free</span>(tmp);   <span class="hljs-comment">//最后释放已删除结点的内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们就实现了双向链表的插入和删除操作，其他操作这里就不演示了。</p><p>接着我们再来简单认识一下另一种类型的链表，循环链表，这种链表实际上和前面我们讲的链表是一样的，但是它的最后一个结点，是与头结点相连的，双向链表和单向链表都可以做成这样的环形结构，我们这里以单链表为例：</p><p><img src="/img/article/data_structure/lianbiao/lianbiao20.png"></p><p>这种类型的链表实际上与普通链表的唯一区别就在于最后是否连接到头结点，因此循环链表支持从任意一个结点出发都可以到达任何的结点，而普通的链表则只能从头结点出发才能到达任意结点，同样也是为了更灵活而设计的。</p><p><strong>链表练习题：</strong></p><ol><li><p>与单链表相比，双链表的优点之一是？</p><p> A. 插入、删除操作更简单</p><p> B．可以进行随机访问</p><p> C．可以省略表头指针或表尾指针</p><p> D．顺序访问相邻结点更灵活</p></li></ol><p>首先插入删除操作并没有更简单，反而更复杂了，随机访问肯定也是不行的，省略表头表尾指针实际上单链表也可以，所以直接冲D就完事了 </p><ol start="2"><li><p>非空的循环单链表head的尾结点（由p所指向）满足？</p><p>A．p-&gt;next &#x3D;&#x3D; NULL</p><p>B．p &#x3D;&#x3D; NULL</p><p>C．p-&gt;next &#x3D;&#x3D;head         </p><p>D．p &#x3D;&#x3D; head</p><p>前面我们说了，循环链表实际上唯一区别就是尾部的下一个结点会指向头部，所以这里选择C </p></li><li><p>若某表最常用的操作是在最后一个结点之后插入一个结点或删除最后一个结点，则采用什么存储方式最节省运算时间？</p><p>A．单链表    B．给出表头指针的单循环链表    C．双链表      D．带头结点的双循环链表</p><p>题干说明了常用的是在尾结点插入或删除尾结点，那么此时不仅需要快速找到最后一个结点，也需要快速找到最后一个结点的前驱结点，所以肯定是使用双向链表，为了快速找到尾结点，使用循环双向链表从头结点直接向前就能找到，所以选择D </p></li><li><p>如果对线性表的操作只有两种，即删除第一个元素，在最后一个元素的后面插入新元素，则最好使用？</p><p>A．只有表头指针没有表尾指针的循环单链表</p><p>B．只有表尾指针没有表头指针的循环单链表</p><p>C．非循环双链表</p><p>D．循环双链表</p><p>首先这里需要操作两个内容，一个是删除第一个元素，另一个是在最后插入新元素，所以A的话只有表头指针虽然循环但是还是得往后遍历才行，而B正好符合，因为循环链表的尾指针可以快速到达头结点，C不可能，D的话，循环双链表也可以，但是没有单链表节省空间，故B是最优解</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c/c++</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新学习数据结构与算法（二）</title>
    <link href="/2022/08/25/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/08/25/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>那么作为数据结构的开篇，我们就从最简单的线性表开始介绍。</p><p>还记得我们开篇提了一个问题吗？<br></br><br></br></p><blockquote><p>我们还希望能够将这些数据按顺序存放，支持在某个位置插入一条数据、删除一条数据、修改一条数据等，这时候，数组就显得有些乏力了</p></blockquote><p>数组无法做到这么高级的功能，那么我们就需要定义一种更加高级的数据结构来做到，我们可以使用线性表（Linear List）<br></br></p><blockquote><p>线性表是由同一类型的数据元素构成的有序序列的线性结构。线性表中元素的个数就是线性表的长度，表的起始位置称为表头，表的结束位置称为表尾，当一个线性表中没有元素时，称为空表。</p></blockquote></br></br><p>线性表一般需要包含以下功能：</p><ul><li><strong>初始化线性表:</strong> 将一个线性表进行初始化，得到一个全新的线性表。</li><li><strong>获取指定位置上的元素:</strong> 直接获取线性表指定位置i上的元素。</li><li><strong>获取元素的位置:</strong> 获取某个元素在线性表上的位置i。</li><li><strong>插入元素：</strong> 在指定位置i上插入一个元素。</li><li><strong>删除元素:</strong> 删除指定位置i上的一个元素。</li><li><strong>获取长度：</strong> 返回线性表的长度。</br></br></br></br></li></ul><p>也就是说，现在我们需要设计的是一种功能完善的表结构，它不像是数组那么低级，而是真正意义上的表：</p><p><img src="/img/article/data_structure/charu1.png"></p><p>简单来说它就是列表，比如我们的菜单，我们在点菜时就需要往菜单列表中添加菜品或是删除菜品，这时列表就很有用了，因为数组长度固定、操作简单，而我们添加菜品、删除菜品这些操作又要求长度动态变化、操作多样。</p><p>那么，如此高级的数据结构，我们该如何去实现呢？实现线性表的结构一般有两种，一种是顺序存储实现，还有一种是链式存储实现，我们先来看第一种，也是最简单的的一种。<br></br><br></br></p></br><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>前面我们说到，既然数组无法实现这样的高级表结构，那么我就基于数组，对其进行强化，也就是说，我们存放数据还是使用数组，但是我们可以为其编写一些额外的操作来强化为线性表，像这样底层依然采用顺序存储实现的线性表，我们称为顺序表。</p><p><img src="/img/article/data_structure/shuzu1.png"></p><p>这里我们可以先定义一个新的结构体类型，将一些需要用到的数据保存在一起，这里我们以int类型的线性表为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;  <span class="hljs-comment">//这里我们的元素类型就用int为例吧，先起个别名</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> &#123;</span><br>    E <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>];   <span class="hljs-comment">//实现顺序表的底层数组</span><br>    <span class="hljs-type">int</span> capacity;   <span class="hljs-comment">//表示底层数组的容量</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>为了一会使用方便，我们可以给其起一个别名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> * <span class="hljs-title">ArrayList</span>;</span> <span class="hljs-comment">//因为是数组实现，所以就叫ArrayList，这里直接将List的指针起别名</span><br></code></pre></td></tr></table></figure><p>然后我们就可以开始编写第一个初始化操作了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;   <span class="hljs-comment">//直接将数组的容量设定为10即可</span><br>&#125;<br></code></pre></td></tr></table></figure></br></br></br></br></br><p>但是我们发现一个问题，这样的话我们的顺序表长度不就是固定为10的了吗？而前面我们线性表要求的是长度是动态增长的，那么这个时候怎么办呢？我们可以直接使用一个指针来指向底层数组的内存区域，当装不下的时候，我们可以创建一个新的更大的内存空间来存放数据，这样就可以实现扩容了，所以我们来修改一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> &#123;</span><br>    E * <span class="hljs-built_in">array</span>;   <span class="hljs-comment">//指向顺序表的底层数组</span><br>    <span class="hljs-type">int</span> capacity;   <span class="hljs-comment">//数组的容量</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>接着我们修改一下初始化函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;  <span class="hljs-comment">//这里就默认所有的顺序表初始大小都为10吧，随意</span><br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);   <span class="hljs-comment">//使用malloc函数申请10个int大小的内存空间，作为底层数组使用</span><br>    <span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;    <span class="hljs-comment">//容量同样设定为10</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是还没完，因为我们的表里面，默认情况下是没有任何元素的，我们还需要一个变量来表示当前表中的元素数量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> &#123;</span><br>    E * <span class="hljs-built_in">array</span>;   <span class="hljs-comment">//指向顺序表的底层数组</span><br>    <span class="hljs-type">int</span> capacity;   <span class="hljs-comment">//数组的容量</span><br>    <span class="hljs-type">int</span> size;   <span class="hljs-comment">//表中的元素数量</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> * <span class="hljs-title">ArrayList</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;  <span class="hljs-comment">//这里就默认所有的顺序表初始大小都为10吧，随意</span><br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);   <span class="hljs-comment">//使用malloc函数申请10个int大小的内存空间，作为底层数组使用</span><br>    <span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;    <span class="hljs-comment">//容量同样设定为10</span><br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;   <span class="hljs-comment">//元素数量默认为0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种情况我们需要考虑，也就是说如果申请内存空间失败，那么需要返回一个结果告诉调用者：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//需要判断如果申请的结果为NULL的话表示内存空间申请失败</span><br>    <span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">//正常情况下返回true也就是1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样，一个比较简单的顺序表就定义好，我们可以通过initList函数对其进行初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> <span class="hljs-title">list</span>;</span>   <span class="hljs-comment">//创建新的结构体变量</span><br>    <span class="hljs-keyword">if</span>(initList(&amp;<span class="hljs-built_in">list</span>))&#123;   <span class="hljs-comment">//对其进行初始化，如果失败就直接结束</span><br>      ...<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表初始化失败，无法启动程序！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们来编写一下插入和删除操作，对新手来说也是比较难以理解的操作：</p><p><img src="/img/article/data_structure/charu1.png"></p><p>我们先设计好对应的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">//list就是待操作的表，element就是需要插入的元素，index就是插入的位置（注意顺序表的index是按位序计算的，从1开始，一般都是第index个元素）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们按照上面的思路来编写一下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; index - <span class="hljs-number">1</span>; i--)  <span class="hljs-comment">//先使用for循环将待插入位置后续的元素全部丢到后一位</span><br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>] = element;    <span class="hljs-comment">//挪完之后，位置就腾出来了，直接设定即可</span><br>    <span class="hljs-built_in">list</span>-&gt;size++;   <span class="hljs-comment">//别忘了插入之后相当于多了一个元素，记得size + 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以来测试一下了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;   <span class="hljs-comment">//编写一个函数用于打印表当前的数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; ++i)   <span class="hljs-comment">//表里面每个元素都拿出来打印一次</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-keyword">if</span>(initList(&amp;<span class="hljs-built_in">list</span>))&#123;<br>        insertList(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">666</span>, <span class="hljs-number">1</span>);  <span class="hljs-comment">//每次插入操作后都打印一下表，看看当前的情况 </span><br>        printList(&amp;<span class="hljs-built_in">list</span>);<br>        insertList(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">777</span>, <span class="hljs-number">1</span>);<br>        printList(&amp;<span class="hljs-built_in">list</span>);<br>        insertList(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">888</span>, <span class="hljs-number">2</span>);<br>        printList(&amp;<span class="hljs-built_in">list</span>);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表初始化失败，无法启动程序！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/img/article/data_structure/yanzheng1.png"></p><p>虽然这样看起来没什么问题了，但是如果我们在非法的位置插入元素会出现问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">insertList(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">666</span>, <span class="hljs-number">-1</span>);   <span class="hljs-comment">//第一个位置就是0，怎么可能插入到-1这个位置呢，这样肯定是不正确的，所以我们需要进行判断</span><br>printList(&amp;<span class="hljs-built_in">list</span>);<br></code></pre></td></tr></table></figure><p>我们需要检查一下插入的位置是否合法：</p><p><img src="/img/article/data_structure/charu3.png"></p><p>转换成位序，也就是[1, size + 1]这个闭区间，所以我们在一开始的时候进行判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//如果在非法位置插入，返回0表示插入操作执行失败</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; index - <span class="hljs-number">1</span>; i--)<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>] = element;<br>    <span class="hljs-built_in">list</span>-&gt;size++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">//正常情况返回1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以再来测试一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(insertList(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">666</span>, <span class="hljs-number">-1</span>))&#123;<br>    printList(&amp;<span class="hljs-built_in">list</span>);<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入失败！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/article/data_structure/charu4.png"></p><p>不过我们还是没有考虑到一个情况，那么就是如果我们的表已经装满了，也就是说size已经达到申请的内存空间最大的大小了，那么此时我们就需要考虑进行扩容了，否则就没办法插入新的元素了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;size == <span class="hljs-built_in">list</span>-&gt;capacity) &#123;   <span class="hljs-comment">//如果size已经到达最大的容量了，肯定是插不进了，那么此时就需要扩容了</span><br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">list</span>-&gt;capacity + (<span class="hljs-built_in">list</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);   <span class="hljs-comment">//我们先计算一下新的容量大小，这里我取1.5倍原长度，当然你们也可以想扩多少扩多少</span><br>        E * newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>, <span class="hljs-keyword">sizeof</span>(E) * newCapacity);  <span class="hljs-comment">//这里我们使用新的函数realloc重新申请更大的内存空间</span><br>        <span class="hljs-keyword">if</span>(newArray == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//如果申请失败，那么就确实没办法插入了，只能返回0表示插入失败了</span><br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">list</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; index - <span class="hljs-number">1</span>; i--)<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>] = element;<br>    <span class="hljs-built_in">list</span>-&gt;size++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>realloc函数可以做到控制动态内存开辟的大小，重新申请的内存空间大小就是我们指定的新的大小，并且原有的数据也会放到新申请的空间中，所以非常方便。当然如果因为内存不足之类的原因导致内存空间申请失败，那么会返回NULL，所以别忘了进行判断。</p></blockquote><p>这样，我们的插入操作就编写完善了，我们可以来测试一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-keyword">if</span>(initList(&amp;<span class="hljs-built_in">list</span>))&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i)<br>            insertList(&amp;<span class="hljs-built_in">list</span>, i, i);<br>        printList(&amp;<span class="hljs-built_in">list</span>);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表初始化失败，无法启动程序！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/article/data_structure/yanzheng2.png"></p><p>这样，我们就完成了顺序表的插入操作，接着我们来编写一下删除操作，其实删除操作也比较类似，也需要对元素进行批量移动，但是我们不需要考虑扩容问题，我们先设计好函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">//list就是待操作的表，index是要删除的元素位序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>按照我们上面插入的思路，我们反过来想一想然后实现删除呢？首先是删除的范围：</p><p><img src="/img/article/data_structure/delete1.png"></p><p>换算成位序就是[1, size]这个闭区间内容，所以我们先来限定一下合法范围：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">//正常情况返回1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着就是删除元素之后，我们还需要做什么呢？我们应该将删除的这个元素后面的全部元素前移一位：</p><p><img src="/img/article/data_structure/delete2.png"></p><p>我们按照这个思路，来编写一下删除操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index - <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i + <span class="hljs-number">1</span>];   <span class="hljs-comment">//实际上只需要依次把后面的元素覆盖到前一个即可</span><br>    <span class="hljs-built_in">list</span>-&gt;size--;   <span class="hljs-comment">//最后别忘了size - 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除相比插入要简单一些，我们来测试一下吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)  <span class="hljs-comment">//先插10个</span><br>    insertList(&amp;<span class="hljs-built_in">list</span>, i, i);<br>deleteList(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">5</span>);   <span class="hljs-comment">//这里删除5号元素</span><br>printList(&amp;<span class="hljs-built_in">list</span>);<br></code></pre></td></tr></table></figure><p>成功得到结果：</p><p><img src="/img/article/data_structure/yanzheng3.png"></p><p>ps:实际结果应该没有0</p><p>OK，那么插入和删除操作我们就成功完成了，还有一些比较简单的功能，我们这里也来依次实现一下，首先是获取长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>-&gt;size;   <span class="hljs-comment">//直接返回size就完事</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着是按位置获取元素和查找指定元素的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">E * <span class="hljs-title function_">getList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//如果超出范围就返回NULL</span><br>    <span class="hljs-keyword">return</span> &amp;<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; ++i) &#123;   <span class="hljs-comment">//一直遍历，如果找到那就返回位序</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] == element) <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//如果遍历完了都没找到，那么就返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们的线性表就实现完成了，完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> &#123;</span><br>    E * <span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> size;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> * <span class="hljs-title">ArrayList</span>;</span><br><br><span class="hljs-type">_Bool</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">_Bool</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;size == <span class="hljs-built_in">list</span>-&gt;capacity) &#123;<br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">list</span>-&gt;capacity + (<span class="hljs-built_in">list</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        E * newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-keyword">if</span>(newArray == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">list</span>-&gt;capacity = newCapacity;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; index - <span class="hljs-number">1</span>; --i)<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>] = element;<br>    <span class="hljs-built_in">list</span>-&gt;size++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">_Bool</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index - <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">list</span>-&gt;size--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>-&gt;size;<br>&#125;<br><br>E * <span class="hljs-title function_">getList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> &amp;<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">findList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, E element)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] == element) <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是我的测试验证代码，将想要的情况在if判断里添加即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 测试打印</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-built_in">list</span>-&gt;size; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">List</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-keyword">if</span> (initList(&amp;<span class="hljs-built_in">list</span>))&#123;<br>        <br><br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表初始化失败，无法启动程序！&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>问题：请问顺序实现的线性表，插入、删除、获取元素操作的时间复杂度为？</p><ul><li><strong>插入：</strong> 因为要将后续所有元素都向后移动，所以平均时间复杂度为$O(n)$</li><li><strong>删除：</strong> 同上，因为要将所有元素向前移动，所以平均时间复杂度为$O(n)$</li><li><strong>获取元素：</strong> 因为可以利用数组特性直接通过下标访问到对应元素，所以时间复杂度为$O(1)$</li></ul><p><strong>顺序表习题：</strong></p><ol><li><p>在一个长度为n的顺序表中，向第i个元素前插入一个新的元素时，需要向后移动多少个元素？</p><p>A. n - i      B. n - i + 1     C. n - i - 1       D. i</p></li></ol><p>注意这里要求的是向第i个元素前插入（第i个表示的是位序，不是下标，不要搞混了，第1个元素下标就为0），这里我们假设n为3，i为2，那么也就是说要在下标为1的这个位置上插入元素，那么就需要移动后面的2个元素，所以答案是B </p><ol start="2"><li><p>顺序表是一种（    ）的存储结构？</p><p> A. 随机存取        B. 顺序存取       C. 索引存取        D. 散列存取</p></li></ol><p>首先顺序表底层是基于数组实现的，那么它肯定是支持随机访问的，因为我们可以直接使用下标想访问哪一个就访问哪一个，所以选择A，不要看到名字叫做顺序表就选择顺序存取，因为它并不需要按照顺序来进行存取，链表才是。这里也没有建立索引去访问元素，也更不可能是散列存取了，散列存取我们会在后面的哈希表中进行介绍 </p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c/c++</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新学习数据结构与算法（一）</title>
    <link href="/2022/08/18/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/08/18/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="😀契机"><a href="#😀契机" class="headerlink" title="😀契机"></a>😀契机</h1><p>最近觉得做java web开发实在是太过无聊，也觉得在公司没什么意思。虽然也没有深入的去学习java的这一套生态，但终归是觉得有些无聊了，再加上年纪的增长，突然想自己以后是否应该向自己喜欢的方向靠一靠呢？思来想去可能还是对游戏非常感兴趣，虽然是喜欢玩游戏，做游戏工作肯定和玩游戏不能相提并论的，但还是想稍微的去靠靠这方面，再加上想对编程稍微深入一下，所以准备重新学一下数据结构与算法和c++。（之前一直无聊无所事事还学了rust和go的语法，但终究是懒没有深入下去也没有找到合适的练手项目去做</p><p>所以就这样，那就开始吧。重新搭建一下博客然后尽可能的做笔记重新开始，go！</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>教程主要是来自一个b站up，笔记写的太好了，基本上摘抄他笔记的关键内容。</p><p><img src="/img/article/data_structure/clion.jpg"></p><p>视频链接 <a href="https://www.bilibili.com/video/BV13W4y127Ey?p=11&t=1&vd_source=1d7c2f1e968b8a0c26bca06e4cc3127e">大型连续剧 数据结构与算法（CLion 2022 最新版）4K蓝光画质+杜比音效 全程高能</a></p><p>笔记链接 <a href="https://www.yuque.com/qingkongxiaguang/cc/aazusi">数据结构与算法</a></p><p>为了更好的看懂他的数据结构教程还是稍微学习了一下他的c语言教程</p><h2 id="线性结构篇"><a href="#线性结构篇" class="headerlink" title="线性结构篇"></a>线性结构篇</h2><h3 id="案例：二分搜索算法"><a href="#案例：二分搜索算法" class="headerlink" title="案例：二分搜索算法"></a>案例：二分搜索算法</h3><p>现在有一个从小到大排序的数组，给你一个目标值target，现在请你找到这个值在数组中的对应下标，如果没有，请返回-1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-comment">//请实现查找算法</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>,<span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>&#125;, target = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, search(arr, <span class="hljs-number">10</span>, target));<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，最简单的方法就是将数组中的元素一个一个进行遍历，总有一个是，如果遍历完后一个都没有，那么就结束：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(nums[i] == target) <span class="hljs-keyword">return</span> i;   <span class="hljs-comment">//循环n次，直到找到为止</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然这样的算法简单粗暴，但是并不是最好的，我们需要遍历n次才能得到结果，时间复杂度为$\Omicron(n)$，我们可以尝试将其优化到更低的时间复杂度。这里我们利用它有序的特性，实际上当我们查找到大于目标target的数时，就没必要继续寻找了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(nums[i] == target) <span class="hljs-keyword">return</span> i;<br>        <span class="hljs-keyword">if</span>(nums[i] &gt; target) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样循环进行的次数也许就会减小了，但是如果我们要寻找的目标target刚好是最后几个元素呢？这时时间复杂度又来到到了$\Omicron(n)$，那么有没有更好的办法呢？我们依然可以继续利用数组有序的特性，既然是有序的，那么我们不妨随机在数组中找一个数，如果这个数大于目标，那么就不再考虑右边的部分，如果小于目标，那么就考虑左边的部分，然后继续在另一部分中再次随机找一个数，这样每次都能将范围缩小，直到找到为止（其思想就比较类似于牛顿迭代法，再次强调数学的重要性)<br><img src="/img/article/data_structure/niudun.png"></p><p>而二分思想就是将一个有序数组不断进行平分，直到找到为止，这样我们每次寻找的范围会不断除以2，所以查找的时间复杂度就降到了$\Omicron(\log_{2}n)$，相比一个一个比较，效率就高了不少：</p><p><img src="/img/article/data_structure/erfen.png"></p><p>好了，那么现在我们就可以利用这种思想，编写出二分搜索算法了，因为每一轮都在进行同样的搜索操作，只是范围不一样，所以这里直接采用递归分治算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> * nums, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;  <span class="hljs-comment">//left代表左边界，right代表右边界</span><br>    <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;   <span class="hljs-comment">//如果左边大于右边，那么肯定就找完了，所以直接返回</span><br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;   <span class="hljs-comment">//这里计算出中间位置</span><br>    <span class="hljs-keyword">if</span>(nums[mid] == target) <span class="hljs-keyword">return</span> mid;   <span class="hljs-comment">//直接比较，如果相等就返回下标</span><br>    <span class="hljs-keyword">if</span>(nums[mid] &gt; target)    <span class="hljs-comment">//这里就是大于或小于的情况了，这里mid+1和mid-1很多人不理解，实际上就是在下一次寻找中不算上当前的mid，因为这里已经比较过了，所以说左边就-1，右边就+1</span><br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, left, mid - <span class="hljs-number">1</span>);   <span class="hljs-comment">//如果大于，那么说明肯定不在右边，直接去左边找</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, mid + <span class="hljs-number">1</span>, right);  <span class="hljs-comment">//如果小于，那么说明肯定不在左边，直接去右边找</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">return</span> binarySearch(nums, target, <span class="hljs-number">0</span>, numsSize - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以使用while循环来实现二分搜索，如果需要验证自己的代码是否有问题，可以直接在力扣上提交代码：<a href="https://leetcode.cn/problems/binary-search/">https://leetcode.cn/problems/binary-search/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c/c++</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
