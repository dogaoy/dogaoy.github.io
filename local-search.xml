<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>重新学习数据结构与算法（一）</title>
    <link href="/2022/08/18/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/08/18/%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="😀契机"><a href="#😀契机" class="headerlink" title="😀契机"></a>😀契机</h1><p>最近觉得做java web开发实在是太过无聊，也觉得在公司没什么意思。虽然也没有深入的去学习java的这一套生态，但终归是觉得有些无聊了，再加上年纪的增长，突然想自己以后是否应该向自己喜欢的方向靠一靠呢？思来想去可能还是对游戏非常感兴趣，虽然是喜欢玩游戏，做游戏工作肯定和玩游戏不能相提并论的，但还是想稍微的去靠靠这方面，再加上想对编程稍微深入一下，所以准备重新学一下数据结构与算法和c++。（之前一直无聊无所事事还学了rust和go的语法，但终究是懒没有深入下去也没有找到合适的练手项目去做</p><p>所以就这样，那就开始吧。重新搭建一下博客然后尽可能的做笔记重新开始，go！</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>教程主要是来自一个b站up，笔记写的太好了，基本上摘抄他笔记的关键内容。</p><p><img src="/img/article/data_structure/clion.jpg"></p><p>视频链接 <a href="https://www.bilibili.com/video/BV13W4y127Ey?p=11&t=1&vd_source=1d7c2f1e968b8a0c26bca06e4cc3127e">大型连续剧 数据结构与算法（CLion 2022 最新版）4K蓝光画质+杜比音效 全程高能</a></p><p>笔记链接 <a href="https://www.yuque.com/qingkongxiaguang/cc/aazusi">数据结构与算法</a></p><p>为了更好的看懂他的数据结构教程还是稍微学习了一下他的c语言教程</p><h2 id="线性结构篇"><a href="#线性结构篇" class="headerlink" title="线性结构篇"></a>线性结构篇</h2><h3 id="案例：二分搜索算法"><a href="#案例：二分搜索算法" class="headerlink" title="案例：二分搜索算法"></a>案例：二分搜索算法</h3><p>现在有一个从小到大排序的数组，给你一个目标值target，现在请你找到这个值在数组中的对应下标，如果没有，请返回-1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-comment">//请实现查找算法</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>,<span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>&#125;, target = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, search(arr, <span class="hljs-number">10</span>, target));<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，最简单的方法就是将数组中的元素一个一个进行遍历，总有一个是，如果遍历完后一个都没有，那么就结束：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(nums[i] == target) <span class="hljs-keyword">return</span> i;   <span class="hljs-comment">//循环n次，直到找到为止</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然这样的算法简单粗暴，但是并不是最好的，我们需要遍历n次才能得到结果，时间复杂度为$\Omicron(n)$，我们可以尝试将其优化到更低的时间复杂度。这里我们利用它有序的特性，实际上当我们查找到大于目标target的数时，就没必要继续寻找了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(nums[i] == target) <span class="hljs-keyword">return</span> i;<br>        <span class="hljs-keyword">if</span>(nums[i] &gt; target) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样循环进行的次数也许就会减小了，但是如果我们要寻找的目标target刚好是最后几个元素呢？这时时间复杂度又来到到了$\Omicron(n)$，那么有没有更好的办法呢？我们依然可以继续利用数组有序的特性，既然是有序的，那么我们不妨随机在数组中找一个数，如果这个数大于目标，那么就不再考虑右边的部分，如果小于目标，那么就考虑左边的部分，然后继续在另一部分中再次随机找一个数，这样每次都能将范围缩小，直到找到为止（其思想就比较类似于牛顿迭代法，再次强调数学的重要性)<br><img src="/img/article/data_structure/niudun.png"></p><p>而二分思想就是将一个有序数组不断进行平分，直到找到为止，这样我们每次寻找的范围会不断除以2，所以查找的时间复杂度就降到了$\Omicron(\log_{2}n)$，相比一个一个比较，效率就高了不少：</p><p><img src="/img/article/data_structure/erfen.png"></p><p>好了，那么现在我们就可以利用这种思想，编写出二分搜索算法了，因为每一轮都在进行同样的搜索操作，只是范围不一样，所以这里直接采用递归分治算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> * nums, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;  <span class="hljs-comment">//left代表左边界，right代表右边界</span><br>    <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;   <span class="hljs-comment">//如果左边大于右边，那么肯定就找完了，所以直接返回</span><br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;   <span class="hljs-comment">//这里计算出中间位置</span><br>    <span class="hljs-keyword">if</span>(nums[mid] == target) <span class="hljs-keyword">return</span> mid;   <span class="hljs-comment">//直接比较，如果相等就返回下标</span><br>    <span class="hljs-keyword">if</span>(nums[mid] &gt; target)    <span class="hljs-comment">//这里就是大于或小于的情况了，这里mid+1和mid-1很多人不理解，实际上就是在下一次寻找中不算上当前的mid，因为这里已经比较过了，所以说左边就-1，右边就+1</span><br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, left, mid - <span class="hljs-number">1</span>);   <span class="hljs-comment">//如果大于，那么说明肯定不在右边，直接去左边找</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, mid + <span class="hljs-number">1</span>, right);  <span class="hljs-comment">//如果小于，那么说明肯定不在左边，直接去右边找</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">return</span> binarySearch(nums, target, <span class="hljs-number">0</span>, numsSize - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以使用while循环来实现二分搜索，如果需要验证自己的代码是否有问题，可以直接在力扣上提交代码：<a href="https://leetcode.cn/problems/binary-search/">https://leetcode.cn/problems/binary-search/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c/c++</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
